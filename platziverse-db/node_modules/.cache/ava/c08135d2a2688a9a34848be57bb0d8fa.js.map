{"version":3,"sources":["agent-test.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","single","Object","assign","id","uuid","AgentStub","db","sandbox","uuidArgs","where","beforeEach","create","hasMany","findOne","stub","withArgs","returns","Promise","resolve","byUuid","findById","byId","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called","calledWith","agent","calledOnce","deepEqual","createOrUpdate"],"mappings":"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","file":"agent-test.js","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst agentFixtures = require('./fixtures/agent')\n\nlet config = {\n  logging () {}\n}\n\nlet MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet single = Object.assign({}, agentFixtures.single)\nlet id = 1\nlet uuid = 'yyy-yyy-yyy'\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\nlet uuidArgs = {\n  where: {\n    uuid\n  }\n}\n\ntest.beforeEach(async () => {\n  sandbox = sinon.sandbox.create()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // Model FindOne stub\n  AgentStub.findOne = sandbox.stub()\n  AgentStub.findOne.withArgs(uuidArgs).returns(Promise.resolve(agentFixtures.byUuid(uuid)))\n\n  // Model FindById stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  const setupDatabase = proxyquire('../', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.sandbox.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('Setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the MetricModel')\n  t.true(MetricStub.belongsTo.called, 'MetricModel.belongsTo was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Metric should be the AgentModel')\n})\n\n// test case\ntest.serial('Agent#findByID', async t => {\n  let agent = await db.Agent.findById(id)\n  t.true(AgentStub.findById.called, 'findById should be called on model')\n  t.true(AgentStub.findById.calledOnce, 'findById should be called once')\n  t.true(AgentStub.findById.calledWith(id), 'findById should be called with specified id')\n  t.deepEqual(agent, agentFixtures.byId(id), 'Should be the same.')\n})\n\n\ntest.serial('Agent#createOrUpdate', async t => {\n  let agent = await db.Agent.createOrUpdate(single)\n  t.deepEqual(agent, single, 'Agent should be the same')\n})"]}